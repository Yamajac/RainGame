;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   RAINGAME - Yamajac, /u/Yamatjac, @Yamajac#3141, CharlotteConnolly@yamajac.com
;
;   The most fully featured game engine to ever exist in Rainmeter. 
;   (Though it's also the only public one, so maybe that's a little disingenuous :D)
;
;   Play prebuilt custom worlds from other users or build your own using the included
;   world builder(Soonâ„¢). Quests, monsters, inventories, you name it... eventually.
;
;  
;   TODO:
;       - Object interactions
;       - NPC Dialogue
;       - Inventory
;       - Quests
;       - Random Encounters
;       - Build the world builder
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; All the boring shit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[Rainmeter]
Update = 16
DefaultUpdateDivider = -1
[Metadata]
Name        = Raingame
Author      = Yamajac - /u/Yamatjac
Information = A game engine written entirely in Rainmeter .ini files
Version     = Alpha

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Some more boring shit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[Variables]
Game = ExampleGame
ObjectLayers =

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Game Functions - Player movement, collision detection, etc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; "Save" function. Update this measure to save all the saveable data and reload the game
; Should probably separate the save and reload functions but I don't have a reason to yet
; and it won't be difficult at all if I ever do need to.
[Refresher]
Measure  = Calc
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!WriteKeyValue Variables PlayerX #PlayerX# "#@#Games/#Game#/#Game#.inc"][!WriteKeyValue Variables PlayerY #PlayerY# "#@#Games/#Game#/#Game#.inc"][!WriteKeyValue Variables CurrentScreen #CurrentScreen# "#@#Games/#Game#/#Game#.inc"][!Refresh]

; Swap tiles and apply an optional object layer
; Pass the tiletype with the data to the HandleSwaps MinValue and then update the measure
; For using this on an event other than a player colliding with an interactable tile, just build a 
; dummy tiletype and pass that tiletype to the function.
[HandleSwaps]
Measure  = String
String   = [#ObjectLayer[&[#CURRENTSECTION]:MinValue]]
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
IfMatchMode      = 1
IfMatch          = >
IfMatchAction    = [!UpdateMeasureGroup ObjectLayerDeleter]
IfNotMatchAction = [!UpdateMeasure AddObjectLayer]
OnUpdateAction   = [!UpdateMeasureGroup Swap][!UpdateMeasureGroup ObjectLayers][!UpdateMeterGroup ObjectLayers][!Redraw] 
[GetObjectLayerToDelete]
Measure  = String
String   = [HandleSwaps]
Group    = NoUpdate | ObjectLayerDeleter
Disabled = 1
DynamicVariables = 1
Substitute       = ">" : ""
[DeleteObjectLayer]
Measure  = String
String   = #ObjectLayers#
Group    = NoUpdate | ObjectLayerDeleter
Disabled = 1
DynamicVariables = 1
Substitute       = "[GetObjectLayerToDelete]|" : ""
OnUpdateAction = [!SetVariable ObjectLayers [#CURRENTSECTION#]]
[AddObjectLayer]
Measure  = String
String   = #ObjectLayers#
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!SetVariable ObjectLayers #ObjectLayers#[#ObjectLayer[&HandleSwaps:MinValue]]|]
[SwapFrom]
Measure  = String
String   = [#From[&HandleSwaps:MinValue]]
Group    = NoUpdate | Swap
Disabled = 1
MinValue = 0
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = ".{0,[SwapFrom:MinValue]}(.).*" : "\1"
[SwapTo]
Measure  = String
String   = [#To[&HandleSwaps:MinValue]]
Group    = NoUpdate | Swap
Disabled = 1
MinValue = 0
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = ".{0,[SwapTo:MinValue]}(.).*" : "\1"
[Swap]
Measure  = String
String   = #Collisions#
Group    = NoUpdate | Swap
Disabled = 1
DynamicVariables = 1
Substitute       = "[SwapFrom]":"[SwapTo]"
IfConditionMode  = 1
IfCondition      = [SwapFrom:MinValue] < 10
IfTrueAction     = [!SetVariable Collisions [#CURRENTSECTION#]][!SetOption SwapFrom MinValue ([SwapFrom:MinValue]+1)][!SetOption SwapTo MinValue ([SwapTo:MinValue]+1)][!UpdateMeasureGroup Swap]
IfFalseAction    = [!SetOption SwapFrom MinValue 0][!SetOption SwapTo MinValue 0]

; Player movement functions
; Update the MoveUp, MoveLeft, MoveRight, MoveDown measure groups to try and move the
; player in that direction. Collisions are calculated using a collisions map in the
; screen. Updates measuregroup TileX where X is the tiletype the player tried 
; to move into, whether it was a success or not.
; Tiletype resolving to 2 will not call a callback function as it refreshes the skin
[HandleMoveUp]
Measure  = Calc
Formula  = #PlayerY# - 1
Group    = MoveUp | NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!SetOption DetectMoveUp MinValue "([#CURRENTSECTION#] * #GameWidth# + #PlayerX#)"][!UpdateMeasure DetectMoveUp]
[DetectMoveUp]
Measure  = String
String   = #Collisions#
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = ".{[DetectMoveUp:MinValue]}(.).*":"\1"
IfConditionMode  = 1
IfCondition      = [#Tile[&[#CURRENTSECTION]]] = 0
IfTrueAction     = [!SetVariable PlayerY [HandleMoveUp]][!UpdateMeasureGroup Tile[#CURRENTSECTION#]][!UpdateMeasureGroup PlayerMoved][!UpdateMeterGroup PlayerMoved][!Redraw]
IfFalseAction    = [!UpdateMeasureGroup Tile[#CURRENTSECTION#]]
IfCondition2     = [#Tile[&[#CURRENTSECTION]]] = 2
IfTrueAction2    = [!SetVariable PlayerY [#Y[&[#CURRENTSECTION]]]][!SetVariable PlayerX [#X[&[#CURRENTSECTION]]]][!SetVariable CurrentScreen [#Screen[&[#CURRENTSECTION]]]][!UpdateMeasure Refresher]
IfCondition3     = [#Tile[&[#CURRENTSECTION]]] = 3
IfTrueAction3    = [!SetOption HandleSwaps MinValue [#CURRENTSECTION#]][!UpdateMeasure HandleSwaps]

[HandleMoveLeft]
Measure  = Calc
Formula  = #PlayerX# - 1
Group    = MoveLeft | NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!SetOption DetectMoveLeft MinValue "(#PlayerY# * #GameWidth# + [#CURRENTSECTION#])"][!UpdateMeasure DetectMoveLeft]
[DetectMoveLeft]
Measure  = String
String   = #Collisions#
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = ".{[DetectMoveLeft:MinValue]}(.).*":"\1"
IfConditionMode  = 1
IfCondition      = [#Tile[&[#CURRENTSECTION]]] = 0
IfTrueAction     = [!SetVariable PlayerX [HandleMoveLeft]][!UpdateMeasureGroup Tile[#CURRENTSECTION#]][!UpdateMeasureGroup PlayerMoved][!UpdateMeterGroup PlayerMoved][!Redraw]
IfFalseAction    = [!UpdateMeasureGroup Tile[#CURRENTSECTION#]]
IfCondition2     = [#Tile[&[#CURRENTSECTION]]] = 2
IfTrueAction2    = [!SetVariable PlayerY [#Y[&[#CURRENTSECTION]]]][!SetVariable PlayerX [#X[&[#CURRENTSECTION]]]][!SetVariable CurrentScreen [#Screen[&[#CURRENTSECTION]]]][!UpdateMeasure Refresher]
IfCondition3     = [#Tile[&[#CURRENTSECTION]]] = 3
IfTrueAction3    = [!SetOption HandleSwaps MinValue [#CURRENTSECTION#]][!UpdateMeasure HandleSwaps]

[HandleMoveRight]
Measure  = Calc
Formula  = #PlayerX# + 1
Group    = MoveRight | NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!SetOption DetectMoveRight MinValue "(#PlayerY# * #GameWidth# + [#CURRENTSECTION#])"][!UpdateMeasure DetectMoveRight]
[DetectMoveRight]
Measure  = String
String   = #Collisions#
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = ".{[DetectMoveRight:MinValue]}(.).*":"\1"
IfConditionMode  = 1
IfCondition      = [#Tile[&[#CURRENTSECTION]]] = 0
IfTrueAction     = [!SetVariable PlayerX [HandleMoveRight]][!UpdateMeasureGroup Tile[#CURRENTSECTION#]][!UpdateMeasureGroup PlayerMoved][!UpdateMeterGroup PlayerMoved][!Redraw]
IfFalseAction    = [!UpdateMeasureGroup Tile[#CURRENTSECTION#]]
IfCondition2     = [#Tile[&[#CURRENTSECTION]]] = 2
IfTrueAction2    = [!SetVariable PlayerY [#Y[&[#CURRENTSECTION]]]][!SetVariable PlayerX [#X[&[#CURRENTSECTION]]]][!SetVariable CurrentScreen [#Screen[&[#CURRENTSECTION]]]][!UpdateMeasure Refresher]
IfCondition3     = [#Tile[&[#CURRENTSECTION]]] = 3
IfTrueAction3    = [!SetOption HandleSwaps MinValue [#CURRENTSECTION#]][!UpdateMeasure HandleSwaps]

[HandleMoveDown]
Measure  = Calc
Formula  = #PlayerY# + 1
Group    = MoveDown | NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!SetOption DetectMoveDown MinValue "([#CURRENTSECTION#] * #GameWidth# + #PlayerX#)"][!UpdateMeasure DetectMoveDown]
[DetectMoveDown]
Measure  = String
String   = #Collisions#
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = ".{[DetectMoveDown:MinValue]}(.).*":"\1"
IfConditionMode  = 1
IfCondition      = [#Tile[&[#CURRENTSECTION]]] = 0
IfTrueAction     = [!SetVariable PlayerY [HandleMoveDown]][!UpdateMeasureGroup Tile[#CURRENTSECTION#]][!UpdateMeasureGroup PlayerMoved][!UpdateMeterGroup PlayerMoved][!Redraw]
IfFalseAction    = [!UpdateMeasureGroup Tile[#CURRENTSECTION#]]
IfCondition2     = [#Tile[&[#CURRENTSECTION]]] = 2
IfTrueAction2    = [!SetVariable PlayerY [#Y[&[#CURRENTSECTION]]]][!SetVariable PlayerX [#X[&[#CURRENTSECTION]]]][!SetVariable CurrentScreen [#Screen[&[#CURRENTSECTION]]]][!UpdateMeasure Refresher]
IfCondition3     = [#Tile[&[#CURRENTSECTION]]] = 3
IfTrueAction3    = [!SetOption HandleSwaps MinValue [#CURRENTSECTION#]][!UpdateMeasure HandleSwaps]


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pre-Init: Grab the current game and load the data into memory
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[LoadGame]
@IncludeGame   = #@#Games/#Game#/#Game#.inc
@IncludeScreen = #@#Games/#Game#/Screens/#CurrentScreen#.inc

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Init: Draw the game screen and initialize game hooks/events
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[GameArea]
Meter = Shape
Shape = Rectangle 0,0,(#GameWidth# * #TileSize#), (#GameHeight# * #TileSize#) | FillColor 0,0,0,255 | StrokeWidth 0

[Background]
Meter     = Image
ImageName = #@#Games/#Game#/Resources/Backgrounds/#Background#

[GetObjectLayer1]
Measure = String
String  = #ObjectLayers#
Group   = ObjectLayers
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = "((.*?)\|){0,0}(.*?)(\||$).*":"\3" 
[ObjectLayer1]
Meter     = Image
Group     = ObjectLayers
ImageName = #@#Games/#Game#/Resources/ObjectLayers/#CurrentScreen#/[GetObjectLayer1]
DynamicVariables = 1


[Player]
Meter = Shape
Group = PlayerMoved
Shape = Rectangle (#PlayerX# * #TileSize#), (#PlayerY# * #TileSize#), #TileSize#, #TileSize# | FillColor 255,0,0,80 | StrokeWidth 0
DynamicVariables = 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Post-Init: Start the main game 'loop'
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[RUN]
Measure = Calc
OnUpdateAction = [!EnableMeasureGroup NoUpdate]














