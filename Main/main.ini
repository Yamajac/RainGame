;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   RAINGAME - Yamajac, /u/Yamatjac, @Yamajac#3141, CharlotteConnolly@yamajac.com
;
;   The most fully featured game engine to ever exist in Rainmeter. 
;   (Though it's also the only public one, so maybe that's a little disingenuous :D)
;
;   Play prebuilt custom worlds from other users or build your own using the included
;   world builder(Soonâ„¢). Quests, monsters, inventories, you name it... eventually.
;
;  
;   TODO:
;       - Object interactions
;       - NPC Dialogue
;       - Inventory
;       - Quests
;       - Random Encounters
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; All the boring shit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[Rainmeter]
Update = 16
DefaultUpdateDivider = -1
[Metadata]
Name        = Raingame
Author      = Yamajac - /u/Yamatjac
Information = A game engine written entirely in Rainmeter .ini files
Version     = Alpha

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Some more boring shit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[Variables]
Game = PokemonRed
Direction = 3
ObjectLayers =
ScreenWidth = 0
ScreenHeight = 0



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Actually cool shit
; 
; Don't Repeat Yourself
; Save often used bang groups as variables so you can edit them all at once
; I forgot this was a thing earlier so I won't follow the DRY principle entirely
; But it's EXTREMELY useful for skins like this
; Unfortunately we can't do this for bangs with #CURRENTSECTION# in them :(
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; HandleMove Conditions + Bangs
HandleMoveUpdateAction = [!SetVariable CurrentCollider Player][!UpdateMeasure EntityGetTile][!UpdateMeasure GetColliderCode][!UpdateMeasure CheckEntityCollisions][!UpdateMeasureGroup Tile[CheckTileCollisions]][!UpdateMeasureGroup PlayerUpdate][!UpdateMeterGroup PlayerUpdate][!Redraw]
; DetectMove Conditions + Bangs


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Game Functions - Player movement, collision detection, etc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; "Save" function. Update this measure to save all the saveable data and reload the game
; Should probably separate the save and reload functions but I don't have a reason to yet
; and it won't be difficult at all if I ever do need to.
[Refresher]
Measure  = Calc
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!WriteKeyValue Variables PlayerX #PlayerX# "#@#Games/#Game#/#Game#.inc"][!WriteKeyValue Variables PlayerY #PlayerY# "#@#Games/#Game#/#Game#.inc"][!WriteKeyValue Variables CurrentScreen #CurrentScreen# "#@#Games/#Game#/#Game#.inc"][!Refresh]

; Swap tiles and apply an optional object layer
; Pass the tiletype with the data to the LayerSwap Variable and then update the measure
; For using this on an event other than a player colliding with an interactable tile, just build a 
; dummy tiletype and pass that tiletype to the function.
[HandleSwaps]
Measure  = String
String   = [#ObjectLayer[#LayerSwap]]
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
IfMatchMode      = 1
IfMatch          = >
IfMatchAction    = [!UpdateMeasureGroup ObjectLayerDeleter]
IfNotMatchAction = [!UpdateMeasure AddObjectLayer]
OnUpdateAction   = [!UpdateMeasureGroup Swap][!UpdateMeasureGroup ObjectLayers][!UpdateMeterGroup ObjectLayers][!Redraw] 
[GetObjectLayerToDelete]
Measure  = String
String   = [HandleSwaps]
Group    = NoUpdate | ObjectLayerDeleter
Disabled = 1
DynamicVariables = 1
Substitute       = ">" : ""
[DeleteObjectLayer]
Measure  = String
String   = #ObjectLayers#
Group    = NoUpdate | ObjectLayerDeleter
Disabled = 1
DynamicVariables = 1
Substitute       = "[GetObjectLayerToDelete]|" : ""
OnUpdateAction   = [!SetVariable ObjectLayers [#CURRENTSECTION#]]
[AddObjectLayer]
Measure  = String
String   = #ObjectLayers#
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!SetVariable ObjectLayers #ObjectLayers#[#ObjectLayer[#LayerSwap]]|]
[SwapFrom]
Measure  = String
String   = [#From[#LayerSwap]]
Group    = NoUpdate | Swap
Disabled = 1
MinValue = 0
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = ".{0,[SwapFrom:MinValue]}(.).*" : "\1"
[SwapTo]
Measure  = String
String   = [#To[#LayerSwap]]
Group    = NoUpdate | Swap
Disabled = 1
MinValue = 0
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = ".{0,[SwapTo:MinValue]}(.).*" : "\1"
[Swap]
Measure  = String
String   = #Collisions#
Group    = NoUpdate | Swap
Disabled = 1
DynamicVariables = 1
Substitute       = "[SwapFrom]":"[SwapTo]"
IfConditionMode  = 1
IfCondition      = [SwapFrom:MinValue] < 10
IfTrueAction     = [!SetVariable Collisions [#CURRENTSECTION#]][!SetOption SwapFrom MinValue ([SwapFrom:MinValue]+1)][!SetOption SwapTo MinValue ([SwapTo:MinValue]+1)][!UpdateMeasureGroup Swap]
IfFalseAction    = [!SetOption SwapFrom MinValue 0][!SetOption SwapTo MinValue 0]

; Sound engine
; On update plays the sound in SoundX where X is the measure's MinValue
[PlaySounds]
Measure  = String
Group    = NoUpdate | PlayerUpdate
Disabled = 1
String   = [#Sound[#PlaySound]]
DynamicVariables = 1
IfMatchMode      = 1
IfMatch          =  \[#*Sound[#PlaySound]*]
IfNotMatchAction = [Play "#@#Games/#Game#/Resources/Sounds/[#Sound[#PlaySound]].wav"]


; Collision handler
; Direction = The direction the entity is moving (all movement in this engine is based on player movement)
; CurrentCollider = The current entity being checked
; TileToBeChecked = The tile being checked by position in the collisions map string
; Set all the variables then update the CheckEntityCollisions measure


[GetColliderCode]
Measure  = String
String   = #CurrentCollider#
Group    = NoUpdate 
Disabled = 1
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = "(?!Player)(^.*)" : "1", "Player" : "0"
[CheckEntityCollisions]
Measure  = String
String   = [Entities]
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = ".*?X#ToBeCheckedX#Y#ToBeCheckedY#N(.*?)\|.*" : "\1"
IfMatchMode      = 1
IfMatch          = "\|"
IfMatchAction    = [!UpdateMeasureGroup CollisionCheckers]
IfNotMatchAction = [!UpdateMeasure HandleEntityCollisions]
[HandleEntityCollisions]
Measure  = String
String   = [CheckEntityCollisions]
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
IfConditionMode  = 1
IfCondition      = ([#[&HandleEntityCollisions]Type] = 0) && ([GetColliderCode] = 0)
IfTrueAction     = [!SetVariable CurrentCollider [CheckEntityCollisions]][!UpdateMeasure EntityGetTile][!UpdateMeasure GetColliderCode][!UpdateMeasure CheckEntityCollisions][!UpdateMeasureGroup EntityUpdate][!UpdateMeterGroup EntityUpdate]
[CheckTileCollisions]
Measure  = String
String   = #Collisions#
Group    = NoUpdate | CollisionCheckers
Disabled = 1
MinValue = 0
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = ".{#TileToBeChecked#}(.).*":"\1"
OnUpdateAction   = [!SetVariable PlaySound [CheckTileCollisions]]
IfConditionMode  = 1
IfCondition      = ([#Tile[&[#CURRENTSECTION]]] = 0) || ([#Tile[&[#CURRENTSECTION]]] = 1) || ([#Tile[&[#CURRENTSECTION]]] = 2) || ([#Tile[&[#CURRENTSECTION]]] = 5)
IfTrueAction     = [!UpdateMeasure MoveEntity]
IfCondition2     = ([#Tile[&[#CURRENTSECTION]]] = 3) && ([GetColliderCode] = 0)
IfTrueAction2    = [!SetVariable LayerSwap [#CURRENTSECTION#]][!UpdateMeasure HandleSwaps]
[MoveEntity]
Measure  = String
String   = #Direction#
Group    = NoUpdate
Disabled = 1
DynamicVariables = 1
IfConditionMode  = 1
IfMatchMode      = 1
; Check if we're leaving a special tile or entering a special tile
IfCondition      = ([#Tile[&CheckTileCollisions]] = 2) && ([GetColliderCode] = 0)
IfTrueAction     = [!SetVariable PlayerY [#Y[&CheckTileCollisions]]][!SetVariable PlayerX [#X[&CheckTileCollisions]]][!SetVariable CurrentScreen [#Screen[&CheckTileCollisions]]][!UpdateMeasure Refresher]
; Move the Player
IfCondition2     = [GetColliderCode] = 0
IfTrueAction2    = [!Log #TileToBeCheckedY#][!SetVariable PlayerY #ToBeCheckedY#][!SetVariable PlayerX #ToBeCheckedX#]
; Move the Entity
IfCondition3     = [GetColliderCode] = 1
IfTrueaction3    = [!SetVariable #CurrentCollider#X "(#Direction# = 0 ? [#[#CurrentCollider]X] : (#Direction# = 1 ? ([#[#CurrentCollider]X] - 1) : (#Direction# = 2 ? ([#[#CurrentCollider]X] + 1) : [#[#CurrentCollider]X])))"][!SetVariable #CurrentCollider#Y "(#Direction# = 0 ? ([#[#CurrentCollider]Y] - 1) : (#Direction# = 1 ? [#[#CurrentCollider]Y] : (#Direction# = 2 ? [#[#CurrentCollider]Y] : ([#[#CurrentCollider]Y] + 1))))"]
; Player movement functions
; Update the MoveUp, MoveLeft, MoveRight, MoveDown measure groups to try and move the
; player in that direction. Collisions are calculated using a collisions map in the
; screen. Updates measuregroup TileX where X is the tiletype the player tried 
; to move into, whether it was a success or not.
; Tiletype resolving to 2 will not call a callback function as it refreshes the skin
[PlayerHandleMove0]
Measure  = Calc
Formula  = #PlayerY# - 1
Group    = MoveUp | NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!SetVariable Direction 0]#HandleMoveUpdateAction#
[PlayerHandleMove1]
Measure  = Calc
Formula  = #PlayerX# - 1
Group    = MoveLeft | NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!SetVariable Direction 1]#HandleMoveUpdateAction#
[PlayerHandleMove2]
Measure  = Calc
Formula  = #PlayerX# + 1
Group    = MoveRight | NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!SetVariable Direction 2]#HandleMoveUpdateAction#
[PlayerHandleMove3]
Measure  = Calc
Formula  = #PlayerY# + 1
Group    = MoveDown | NoUpdate
Disabled = 1
DynamicVariables = 1
OnUpdateAction   = [!SetVariable Direction 3]#HandleMoveUpdateAction#

; Entity Movement functions
; Since entity movement is based on player movement, this is a fair bit simpler
[EntityGetTile]
Measure = Calc
DynamicVariables = 1
OnUpdateAction   = [!SetVariable ToBeCheckedX "(#Direction# = 0 ? [#[#CurrentCollider]X] : (#Direction# = 1 ? ([#[#CurrentCollider]X] - 1) : (#Direction# = 2 ? ([#[#CurrentCollider]X] + 1) : [#[#CurrentCollider]X])))"][!SetVariable ToBeCheckedY "(#Direction# = 0 ? ([#[#CurrentCollider]Y] - 1) : (#Direction# = 1 ? [#[#CurrentCollider]Y] : (#Direction# = 2 ? [#[#CurrentCollider]Y] : ([#[#CurrentCollider]Y] + 1))))"][!UpdateMeasure SetCurrentTile]
[SetCurrentTile]
Measure = Calc
DynamicVariables = 1
OnUpdateAction   = [!SetVariable TileToBeChecked "(#ToBeCheckedY# * #ScreenWidth# + #ToBeCheckedX#)"]


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pre-Init: Grab the current game and load the data into memory
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[LoadGame]
@IncludeGame   = #@#Games/#Game#/#Game#.inc
@IncludeScreen = #@#Games/#Game#/Screens/#CurrentScreen#.inc

[ScreenWidthLoader]
Measure = Calc
Formula = (#ScreenWidth# = 0 ? #GameWidth# : #ScreenWidth#)
OnUpdateAction = [!SetVariable ScreenWidth [#CURRENTSECTION#]]
[ScreenHeightLoader]
Measure = Calc
Formula = (#ScreenHeight# = 0 ? #GameHeight# : #ScreenHeight#)
OnUpdateAction = [!SetVariable ScreenHeight [#CURRENTSECTION#]]

[EntityLoader]
Measure  = String
String   = #Entities#
Group    = EntityUpdate
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = "(.*?)(\||$)" : "X[#\1X]Y[#\1Y]N\1|"
[Entities]
Measure = String
String  = [&EntityLoader]
Group   = EntityUpdate
DynamicVariables = 1

[GameX]
Measure = Calc
Formula = (#Scrolling# = 1 ? (#PlayerX# < (#GameWidth# / 2) ? 0 : (#PlayerX# > (#ScreenWidth# - (#GameWidth#) / 2) ? ((#GameWidth# - #ScreenWidth#) * #TileSize#) : Neg((#PlayerX# - Ceil(#GameWidth# / 2)) * #TileSize# ))) : 0)
Group   = PlayerUpdate
DynamicVariables = 1
[GameY]
Measure = Calc
Formula = (#Scrolling# = 1 ? (#PlayerY# < (#GameHeight# / 2) ? 0 : (#PlayerY# > (#ScreenHeight# - (#GameHeight#) / 2) ? ((#GameHeight# - #ScreenHeight#) * #TileSize#) : Neg((#PlayerY# - Ceil(#GameHeight# / 2)) * #TileSize# ))) : 0)
Group   = PlayerUpdate
DynamicVariables = 1

[PlayerDrawX]
Measure = Calc
Formula = (#Scrolling# = 1 ? (#PlayerX# < (#GameWidth# / 2) ? (#PlayerX# * #TileSize#) : (#PlayerX# > (#ScreenWidth# - (#GameWidth#) / 2) ? ((#GameWidth# -(#ScreenWidth# - #PlayerX#)) * #TileSize#) : (Ceil(#GameWidth# / 2) * #TileSize#) )) : (#PlayerX# * #TileSize#))
Group   = PlayerUpdate
DynamicVariables = 1
[PlayerDrawY]
Measure = Calc
Formula = (#Scrolling# = 1 ? (#PlayerY# < (#GameHeight# / 2) ? (#PlayerY# * #TileSize#) : (#PlayerY# > (#ScreenHeight# - (#GameHeight#) / 2) ? ((#GameHeight# -(#ScreenHeight# - #PlayerY#)) * #TileSize#) : (Ceil(#GameHeight# / 2) * #TileSize#) )) : (#PlayerY# * #TileSize#))
Group   = PlayerUpdate
DynamicVariables = 1



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Init: Draw the game screen and initialize game hooks/events
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[GameAreaBG]
Meter = Shape
Shape = Rectangle 0,0,(#GameWidth# * #TileSize#), (#GameHeight# * #TileSize#) | FillColor 0,0,0,255 | StrokeWidth 0

[GameArea]
Meter = Shape
Shape = Rectangle 0,0,(#GameWidth# * #TileSize#), (#GameHeight# * #TileSize#) | FillColor 0,0,0,255 | StrokeWidth 0

[Background]
Meter     = Image
Group     = PlayerUpdate
X         = [GameX]
Y         = [GameY]
ImageName = #@#Games/#Game#/Resources/Backgrounds/#Background#
Container = GameArea
DynamicVariables = 1

[DrawObjectLayers]
@IncludeObjectLayers = Includes/ObjectLayers.inc

[DrawEntities]
@IncludeEntityMeters = Includes/Entities.inc


[Player]
Meter = Image
Group = PlayerUpdate
ImageName = #@#Games/#Game#/Resources/Sprites/#PlayerSprite##Direction#.png
X         = [PlayerDrawX]
Y         = [PlayerDrawY]
DynamicVariables = 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Post-Init: Start the main game 'loop'
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[RUN]
Measure = Calc
OnUpdateAction = [!EnableMeasureGroup NoUpdate]














